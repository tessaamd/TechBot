from aiogram import Router, types
from config import settings
from database.db import db

router = Router()

@router.callback_query(lambda c: c.data.startswith("reply_"))
async def process_reply_callback(callback: types.CallbackQuery):
    ticket_id = int(callback.data.split("_")[1])
    await callback.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:")
    await callback.answer()

@router.message(lambda message: message.reply_to_message and 
                message.chat.id == settings.SUPPORT_CHAT_ID)
async def handle_support_reply(message: types.Message):
    try:
        text = message.reply_to_message.text
        ticket_id = int(text.split("#")[1].split("\n")[0])
    except (IndexError, ValueError):
        return
    
    answer = message.text.strip()
    if len(answer) > settings.MAX_LENGTH:
        return await message.reply(
            f"‚ùå –û—Ç–≤–µ—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç {settings.MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤!"
        )
    
    ticket = db.get_ticket(ticket_id)
    if not ticket or ticket[5] != 'open':
        return await message.reply("‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    db.close_ticket(ticket_id, answer)
    
    await message.bot.send_message(
        chat_id=ticket[1],  
        text=f"üîî –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{answer}"
    )
    await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")